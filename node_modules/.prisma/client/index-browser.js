
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 5.0.0
 * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
 */
Prisma.prismaVersion = {
  client: "5.0.0",
  engine: "6b0aef69b7cdfc787f822ecd7cdc76d5f1991584"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TokensTBLScalarFieldEnum = {
  tokenid: 'tokenid',
  refreshtoken: 'refreshtoken',
  userid: 'userid'
};

exports.Prisma.BlacklistedTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  createdat: 'createdat'
};

exports.Prisma.UsersTBLScalarFieldEnum = {
  userid: 'userid',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  password: 'password',
  roleid: 'roleid'
};

exports.Prisma.EmployeeTBLScalarFieldEnum = {
  empid: 'empid',
  roomid: 'roomid',
  officeid: 'officeid',
  siteid: 'siteid',
  buildingid: 'buildingid',
  departmentid: 'departmentid'
};

exports.Prisma.OfficeBoyTBLScalarFieldEnum = {
  officeboyid: 'officeboyid',
  officeid: 'officeid',
  siteid: 'siteid'
};

exports.Prisma.RoleTBLScalarFieldEnum = {
  roleid: 'roleid',
  rolename: 'rolename'
};

exports.Prisma.SiteTBLScalarFieldEnum = {
  siteid: 'siteid',
  sitename: 'sitename'
};

exports.Prisma.BuildingTBLScalarFieldEnum = {
  buildingid: 'buildingid',
  buildingname: 'buildingname',
  siteid: 'siteid'
};

exports.Prisma.OfficeTBLScalarFieldEnum = {
  officeid: 'officeid',
  officeno: 'officeno',
  buildingid: 'buildingid'
};

exports.Prisma.DepartmentTBLScalarFieldEnum = {
  departmentid: 'departmentid',
  departmentname: 'departmentname',
  buildingid: 'buildingid'
};

exports.Prisma.RoomTBLScalarFieldEnum = {
  roomid: 'roomid',
  roomno: 'roomno',
  roomname: 'roomname',
  officeid: 'officeid',
  departmentid: 'departmentid'
};

exports.Prisma.CategoriesTblScalarFieldEnum = {
  categoryid: 'categoryid',
  categoryname: 'categoryname'
};

exports.Prisma.ItemsTBLScalarFieldEnum = {
  userid: 'userid',
  itemid: 'itemid',
  categoryid: 'categoryid',
  itemname: 'itemname',
  itemimagurl: 'itemimagurl',
  itemidescription: 'itemidescription'
};

exports.Prisma.OrdersTBLScalarFieldEnum = {
  orderid: 'orderid',
  empid: 'empid'
};

exports.Prisma.OrderItemsTBLScalarFieldEnum = {
  orderitemid: 'orderitemid',
  itemname: 'itemname',
  itemquantity: 'itemquantity',
  itemsize: 'itemsize',
  orderid: 'orderid'
};

exports.Prisma.CartTBLScalarFieldEnum = {
  cartid: 'cartid',
  empid: 'empid'
};

exports.Prisma.CartItemsTBLScalarFieldEnum = {
  cartitemid: 'cartitemid',
  quanity: 'quanity',
  cartid: 'cartid',
  itemsize: 'itemsize',
  notes: 'notes',
  itemid: 'itemid'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  TokensTBL: 'TokensTBL',
  BlacklistedToken: 'BlacklistedToken',
  UsersTBL: 'UsersTBL',
  EmployeeTBL: 'EmployeeTBL',
  OfficeBoyTBL: 'OfficeBoyTBL',
  RoleTBL: 'RoleTBL',
  SiteTBL: 'SiteTBL',
  BuildingTBL: 'BuildingTBL',
  OfficeTBL: 'OfficeTBL',
  DepartmentTBL: 'DepartmentTBL',
  RoomTBL: 'RoomTBL',
  CategoriesTbl: 'CategoriesTbl',
  ItemsTBL: 'ItemsTBL',
  OrdersTBL: 'OrdersTBL',
  OrderItemsTBL: 'OrderItemsTBL',
  CartTBL: 'CartTBL',
  CartItemsTBL: 'CartItemsTBL'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
