generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model UsersTBL {
    userid    Int           @id @default(autoincrement())
    firstname String
    lastname  String
    email     String        @unique
    role      String
    password  String 
    //createdAt DateTime     @default(now())
    Employee  EmployeeTBL[]
    Items     ItemsTBL[]  // One-to-many relationship with ItemsTBL
    Tokens    TokensTBL[]
}

model TokensTBL{
    tokenid Int  @id @default(autoincrement())
    refreshtoken String 
    userid      Int
    reftoken      UsersTBL  @relation(fields: [userid], references: [userid])
}

model OfficeTBL {
    officeid Int           @id @unique @default(autoincrement())
    officeno Int           @unique
    location String
    Employee EmployeeTBL[] 
    Order    OrdersTBL[]
}

model RoomTBL {
    roomid   Int           @id @unique @default(autoincrement())
    roomno   Int
    roomname String
    Employee EmployeeTBL[]
    Order    OrdersTBL[]
}

model EmployeeTBL {
    emp      UsersTBL  @relation(fields: [empid], references: [userid])
    empid    Int       @id @unique @default(autoincrement())
    roomid   Int
    romid    RoomTBL   @relation(fields: [roomid], references: [roomid])
    officeid Int
    offid    OfficeTBL @relation(fields: [officeid], references: [officeid])
    Cart     CartTBL[]
}

model CategoriesTbl {
    categoryid   Int        @id @unique @default(autoincrement())
    categoryname String     @unique //
    Item         ItemsTBL[] // One-to-many relationship with ItemsTBL
}

model ItemsTBL {
    userid      Int   // Foreign key referencing UsersTBL
    itemid      Int           @id @unique @default(autoincrement())
    creator     UsersTBL      @relation(fields: [userid], references: [userid]) // Many-to-one relationship with UsersTBL
    categoryid  Int   // Foreign key referencing CategoriesTbl
    catid       CategoriesTbl @relation(fields: [categoryid], references: [categoryid]) // Many-to-one relationship with CategoriesTbl
    itemname    String        @unique //
    itemimagurl String
    //cartid      Int       // Foreign key referencing CartTBL
    //carttid     CartTBL   @relation(fields: [cartid], references: [cartid])
    Order       OrdersTBL[]    
}

model OrdersTBL {
    itemid  Int
    itemsid ItemsTBL @relation(fields: [itemid], references: [itemid])
    orderid Int      @id @unique @default(autoincrement())

    officeid Int
    offid    OfficeTBL @relation(fields: [officeid], references: [officeid])

    roomid     Int
    romid      RoomTBL         @relation(fields: [roomid], references: [roomid])
    CartItems  CartItemsTBL[]
}

model CartTBL{
    cartid Int       @id @unique @default(autoincrement())
    empid    Int
    employeeid    EmployeeTBL   @relation(fields: [empid], references: [empid])
    //Items        ItemsTBL[]
    CartItems    CartItemsTBL[]
    //orderItems    OrderItemsTBL[]
    //itemid  Int
    //itemsid ItemsTBL @relation(fields: [itemid], references: [itemid])


}

model CartItemsTBL{
    cartitemid Int       @id @unique @default(autoincrement())
    //itemid Int       @unique
    quanity Int    
    orderid     Int
    ordersid    OrdersTBL @relation(fields: [orderid], references: [orderid])
    cartid      Int 
    carttid     CartTBL? @relation(fields: [cartid], references: [cartid])
} 

//we have to replace OrderItemsTBL to CartItemsTBL
// model OrderItemsTBL { //cartitems
//     orderitemid Int       @id @unique @default(autoincrement())
//     quanity     Int
//     orderid     Int
//     ordersid    OrdersTBL @relation(fields: [orderid], references: [orderid])
    
// }

enum RoleEnumType {
    admin
    employee
    officeBoy
}

model BlacklistedToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    createdat DateTime @default(now())
}



//commands
//------------
// npm run db:studio  
// npx prisma genarate
// npx prisma migrate dev --name init  --create-only => gererate a version of prisma table inside our db  ,geneate prise migration inside out tables
// npx prisma migrate deploy   => deploy ur actual model user
